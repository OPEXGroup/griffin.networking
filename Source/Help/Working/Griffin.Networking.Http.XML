<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Griffin.Networking.Http</name>
  </assembly>
  <members>
    <member name="T:Griffin.Networking.Http.BadRequestException">
      <summary>
            Request is malformed.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.BadRequestException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.BadRequestException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Griffin.Networking.Http.BadRequestException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.BadRequestException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:Griffin.Networking.Http.BadRequestException.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:Griffin.Networking.Http.HttpMessageBuilder">
      <summary>
            Builds HTTP messags from incoming bytes.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.HttpMessageBuilder" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageBuilder.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageBuilder.Append(Griffin.Networking.Buffers.IBufferReader)">
      <summary>
            Append more bytes to your message building
            </summary>
      <param name="reader">Contains bytes which was received from the other end</param>
      <returns>
        <c>true</c> if a complete message has been built; otherwise <c>false</c>.</returns>
      <remarks>You must handle/read everything which is available in the buffer</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageBuilder.TryDequeue(System.Object@)">
      <summary>
            Try to dequeue a message
            </summary>
      <param name="message">Message that the builder has built.</param>
      <returns>
        <c>true</c> if a message was available; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.HttpMessageFactory">
      <summary>
            Used to convert byte[] arrays to/from HTTP messages.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageFactory.CreateSerializer">
      <summary>
            Create a new serializer (used to convert messages to byte buffers)
            </summary>
      <returns>Created serializer</returns>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageFactory.CreateBuilder">
      <summary>
            Create a message builder (used to compose messages from byte buffers)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Griffin.Networking.Http.HttpMessageSerializer">
      <summary>
            Takes HTTP messages and serialize them into bytes.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.HttpMessageSerializer.Serialize(System.Object,Griffin.Networking.Buffers.IBufferWriter)">
      <summary>
            Serialize a message into something that can be transported over the socket.
            </summary>
      <param name="message">Message to serialize</param>
      <param name="writer">Buffer used to store the message</param>
    </member>
    <member name="T:Griffin.Networking.Http.HttpService">
      <summary>
            Base class for handling HTTP requests in the server.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.HttpService.#ctor(Griffin.Networking.Buffers.IBufferSliceStack)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.HttpService" /> class.
            </summary>
      <param name="sliceStack">Used to retreive the buffers which are used during message serialization. Make sure that each buffer is large enough to serialize all headers.</param>
      <exception cref="T:System.ArgumentNullException">sliceStack</exception>
      <remarks>You typically want to pass a <c>static</c> stack to this constructor if you want performance.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.HttpService.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.HttpService.Assign(Griffin.Networking.Servers.IServerClientContext)">
      <summary>
            Assign the context which can be used to communicate with the client
            </summary>
      <param name="context">Context</param>
    </member>
    <member name="M:Griffin.Networking.Http.HttpService.HandleReceive(System.Object)">
      <summary>
            A new message have been received from the remote end.
            </summary>
      <param name="message">You'll receive <see cref="T:Griffin.Networking.Http.Protocol.IRequest" /> or <see cref="T:Griffin.Networking.Http.Protocol.IResponse" /> depending on the type of application.</param>
    </member>
    <member name="M:Griffin.Networking.Http.HttpService.Send(Griffin.Networking.Http.Protocol.IMessage)">
      <summary>
            Send a HTTP message
            </summary>
      <param name="message">Message to send</param>
    </member>
    <member name="P:Griffin.Networking.Http.HttpService.Context">
      <summary>
            Context  used to communicate with the client
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.HttpServerClientContext">
      <summary>
            Lightweight client which just parses the HTTP message and sends it along.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.HttpServerClientContext.#ctor(Griffin.Networking.Buffers.IBufferSlice)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.HttpService" /> class.
            </summary>
      <param name="readBuffer">The read buffer.</param>
    </member>
    <member name="M:Griffin.Networking.Http.HttpServerClientContext.HandleRead(Griffin.Networking.Buffers.IBufferSlice,System.Int32)">
      <summary>
            Handle incoming bytes
            </summary>
      <param name="readBuffer">Buffer containing received bytes</param>
      <param name="bytesReceived">Number of bytes that was recieved (will always be set, any errors have triggered <see cref="M:Griffin.Networking.Servers.ServerClientContext.OnDisconnect(System.Net.Sockets.SocketError)" /> instead).</param>
      <remarks>
            The default implementation will trigger the client with a <see cref="T:Griffin.Networking.Buffers.IBufferReader" /> as message. That means that
            you should not call the base method from your code.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.AuthenticationHandler.#ctor(Griffin.Networking.Http.Services.Authentication.IAuthenticator,Griffin.Networking.Http.Services.Authentication.IPrincipalFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Handlers.AuthenticationHandler" /> class.
            </summary>
      <param name="authenticator">The authenticator.</param>
      <param name="principalFactory">Used to generate the principal which is set for the current thread</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.AuthenticationHandler.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Process message
            </summary>
      <param name="context">
      </param>
      <param name="message">
      </param>
      <remarks>
            Should always call either <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendDownstream(Griffin.Networking.Pipelines.IPipelineMessage)" /> or <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />
            unless the handler really wants to stop the processing.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.AuthenticationHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.BodyDecoder">
      <summary>
            Can decode bodies.
            </summary>
      <remarks>
        <para>
            Will not pass on the <see cref="T:Griffin.Networking.Http.Messages.ReceivedHttpRequest" /> message until the body have been parsed successfully.
            </para>
        <para>
             The decoder uses a BufferPool buffer to host the body contents.The decoder will switch to <see cref="T:System.IO.FileStream" /> for bodies larger than the <c>bufferSize</c> contructor parameter.
            This will of course hurt performance but keep the memory usage per request down.
            </para>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.BodyDecoder.#ctor(Griffin.Networking.Http.Services.IBodyDecoder,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Handlers.BodyDecoder" /> class.
            </summary>
      <param name="decoderService">The decoder service.</param>
      <param name="bufferSize">Buffer size of each buffer in the pool. Read the remarks at <see cref="T:Griffin.Networking.Http.Handlers.BodyDecoder" /></param>
      <param name="sizeLimit">Maximum size of the body in bytes. Larger content will generate a <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> response which will
            be sent back to the client.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.BodyDecoder.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.BodyDecoder.ParseBody(Griffin.Networking.Buffers.IBufferReader)">
      <summary>
            Parser method to copy all body bytes.
            </summary>
      <param name="reader">
      </param>
      <returns>
      </returns>
      <remarks>Needed since a TCP packet can contain multiple messages
            after each other, or partial messages.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.BufferTracer">
      <summary>
            Writes  content to the log
            </summary>
      <remarks>
            Should be the first up handler and/or the last downstream handler.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.BufferTracer.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Process message
            </summary>
      <param name="context">
      </param>
      <param name="message">
      </param>
      <remarks>
            Should always call either <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendDownstream(Griffin.Networking.Pipelines.IPipelineMessage)" /> or <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />
            unless the handler really wants to stop the processing.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.BufferTracer.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.HttpErrorHandler">
      <summary>
            Pipeline handler catching unhandled exceptions
            </summary>
      <remarks>
        <para>
            The handler uses try/catch around <c>context.SendUpstream</c> which allows it to catch any unhandled
            exceptions that all upstreams handler after this one throws. It then logs the exception, all request parameters and finally invokes the 
            <see cref="T:Griffin.Networking.Http.Services.Errors.IErrorFormatter" /> before sending the response back to the client.
            </para>
        <para>Should typically be placed right after the <see cref="T:Griffin.Networking.Http.Pipeline.Handlers.HeaderDecoder" /> in the pipeline</para>
        <para>
            You need to implement your own adapter for the <see cref="T:Griffin.Networking.Logging.LogManager" /> to receive all errors.
            </para>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.HttpErrorHandler.#ctor(Griffin.Networking.Http.Services.Errors.IErrorFormatter)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Handlers.HttpErrorHandler" /> class.
            </summary>
      <param name="formatter">Used to format the response using the uncaught exception.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.HttpErrorHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.HttpErrorHandler.LogError(Griffin.Networking.Http.Protocol.IRequest,System.Exception)">
      <summary>
            Logs the error.
            </summary>
      <param name="request">Request that failed</param>
      <param name="err">Exception which was thrown</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.HttpErrorHandler.FormatException(Griffin.Networking.Http.Protocol.IResponse,Griffin.Networking.Http.Messages.ReceivedHttpRequest,Griffin.Networking.Http.HttpException)">
      <summary>
            Invokes the <see cref="M:Griffin.Networking.Http.Services.Errors.IErrorFormatter.Format(Griffin.Networking.Http.Services.Errors.ErrorFormatterContext)" /> and guards against any exceptions that it might throw.
            </summary>
      <param name="response">Response to send back</param>
      <param name="msg">Request pipeline message</param>
      <param name="exception">Caught exception</param>
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.HttpHeaderSerializer">
      <summary>
            Can serialize HTTP headers
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderSerializer.SerializeResponse(Griffin.Networking.Http.Protocol.IResponse,Griffin.Networking.Buffers.IBufferWriter)">
      <summary>
            Send all headers to the client
            </summary>
      <param name="response">Response containing call headers.</param>
      <param name="writer">Writer to write everything to</param>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.IScopeListener">
      <summary>
            Implemented by the inversion of control container adapter to create child containers.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.IScopeListener.ScopeStarted(System.Object)">
      <summary>
            A request scope should be created
            </summary>
      <param name="id">ID identifying the scope</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.IScopeListener.ScopeEnded(System.Object)">
      <summary>
            A scope haver ended.
            </summary>
      <param name="id">Same id as in <see cref="M:Griffin.Networking.Http.Handlers.IScopeListener.ScopeStarted(System.Object)" /></param>
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.HttpHeaderParser">
      <summary>
            Parses headers
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderParser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Implementation.HttpHeaderParser" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderParser.Parse(Griffin.Networking.Buffers.IBufferReader)">
      <summary>
            Will try to parse everything in the buffer
            </summary>
      <param name="reader">Reader to read from.</param>
      <remarks>
        <para>Do note that the parser is for the header only. The <see cref="E:Griffin.Networking.Http.Implementation.HttpHeaderParser.Completed" /> event will
            indicate that there might be body bytes left in the buffer. You have to handle them by yourself.</para>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderParser.Reset">
      <summary>
            Reset parser state
            </summary>
    </member>
    <member name="E:Griffin.Networking.Http.Implementation.HttpHeaderParser.Completed">
      <summary>
            The header part of the request/response has been parsed successfully. The remaining bytes is for the body
            </summary>
    </member>
    <member name="E:Griffin.Networking.Http.Implementation.HttpHeaderParser.HeaderParsed">
      <summary>
            We've parsed a header and it's value.
            </summary>
    </member>
    <member name="E:Griffin.Networking.Http.Implementation.HttpHeaderParser.RequestLineParsed">
      <summary>
            We've parsed a request line, meaning that all headers is for a HTTP Request.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.PipelineFailureHandler">
      <summary>
            Used to catch all <see cref="T:Griffin.Networking.Pipelines.Messages.PipelineFailure" /> and unhandled <see cref="T:Griffin.Networking.Http.Messages.ReceivedHttpRequest" />.
            </summary>
      <remarks>
        <para>
        </para>
            Should be the last handler to be able to detect unhandled HTTP requests and to generate errors for all
            unprocessed <see cref="T:Griffin.Networking.Pipelines.Messages.PipelineFailure" /></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.PipelineFailureHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.FileHandler">
      <summary>
            Serves files 
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.FileHandler.#ctor(Griffin.Networking.Http.Services.Files.IFileService,Griffin.Networking.Http.Services.Files.MimeTypeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Handlers.FileHandler" /> class.
            </summary>
      <param name="fileService">The file service.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.FileHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Handlers.FileHandler" /> class.
            </summary>
      <remarks>Initializes using a <see cref="T:Griffin.Networking.Http.Services.Files.DiskFileService" /> with current directory as root.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.FileHandler.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Pipeline.Handlers.HeaderDecoder">
      <summary>
            Parses the HTTP header and passes on a constructed message
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Pipeline.Handlers.HeaderDecoder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Pipeline.Handlers.HeaderDecoder" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Pipeline.Handlers.HeaderDecoder.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
    </member>
    <member name="T:Griffin.Networking.Http.Handlers.RequestScope">
      <summary>
            Used to provide a request scope (typically used by inversion of control containers)
            </summary>
      <remarks>Should be the first and the last handlers in a queue</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.RequestScope.#ctor(Griffin.Networking.Http.Handlers.IScopeListener)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Handlers.RequestScope" /> class.
            </summary>
      <param name="listener">The listener.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.RequestScope.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Process message
            </summary>
      <param name="context">
      </param>
      <param name="message">
      </param>
      <remarks>
            Should always call either <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendDownstream(Griffin.Networking.Pipelines.IPipelineMessage)" /> or <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />
            unless the handler really wants to stop the processing.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Handlers.RequestScope.HandleUpstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Handle an message
            </summary>
      <param name="context">Context unique for this handler instance</param>
      <param name="message">Message to process</param>
      <remarks>
            All messages that can't be handled MUST be send up the chain using <see cref="M:Griffin.Networking.Pipelines.IPipelineHandlerContext.SendUpstream(Griffin.Networking.Pipelines.IPipelineMessage)" />.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Pipeline.Handlers.ResponseEncoder">
      <summary>
            Encode message to something that can be sent over the wire.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Pipeline.Handlers.ResponseEncoder.HandleDownstream(Griffin.Networking.Pipelines.IPipelineHandlerContext,Griffin.Networking.Pipelines.IPipelineMessage)">
      <summary>
            Process message
            </summary>
      <param name="context">
      </param>
      <param name="message">
      </param>
    </member>
    <member name="M:Griffin.Networking.Http.HttpServerClientFactory.CreateClient(System.Net.EndPoint)">
      <summary>
            Create a new client
            </summary>
      <param name="remoteEndPoint">IP address of the remote end point</param>
      <returns>Created client</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IHttpCookie">
      <summary>
            A cookie
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpCookie.Name">
      <summary>
            Gets the cookie identifier.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpCookie.Value">
      <summary>
            Gets value. 
            </summary>
      <remarks>
            Set to <c>null</c> to remove cookie.
            </remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpCookie.Name">
      <summary>
            Gets the cookie identifier.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpCookie.Value">
      <summary>
            Gets value. 
            </summary>
      <remarks>
            Set to <c>null</c> to remove cookie.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Specification.IHttpCookieCollection`1">
      <summary>
            Collection of cookies
            </summary>
      <typeparam name="T">Type of cookie</typeparam>
    </member>
    <member name="M:Griffin.Networking.Http.Specification.IHttpCookieCollection`1.Clear">
      <summary>
            Remove all cookies.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Specification.IHttpCookieCollection`1.Remove(System.String)">
      <summary>
            Remove a cookie from the collection.
            </summary>
      <param name="cookieName">Name of cookie.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Specification.IHttpCookieCollection`1.Count">
      <summary>
            Gets the count of cookies in the collection.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Specification.IHttpCookieCollection`1.Item(System.String)">
      <summary>
            Gets the cookie of a given identifier (<c>null</c> if not existing).
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpCookieCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpCookieCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpCookieCollection`1.Clear">
      <summary>
            Remove all cookies.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpCookieCollection`1.Remove(System.String)">
      <summary>
            Remove a cookie from the collection.
            </summary>
      <param name="cookieName">Name of cookie.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpCookieCollection`1.Count">
      <summary>
            Gets the count of cookies in the collection.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpCookieCollection`1.Item(System.String)">
      <summary>
            Gets the cookie of a given identifier (<c>null</c> if not existing).
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IHttpFileCollection">
      <summary>
            Collection of iles
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IHttpFileCollection.Contains(System.String)">
      <summary>
            Checks if a file exists.
            </summary>
      <param name="name">Name of the file (form item name)</param>
      <returns>
      </returns>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IHttpFileCollection.Add(Griffin.Networking.Http.Protocol.IHttpFile)">
      <summary>
            Add a new file.
            </summary>
      <param name="file">File to add.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IHttpFileCollection.Clear">
      <summary>
            Remove all files from disk.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpFileCollection.Item(System.String)">
      <summary>
            Get a file
            </summary>
      <param name="name">Name in form</param>
      <returns>File if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpFileCollection.Count">
      <summary>
            Gets number of files
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpFileCollection.Contains(System.String)">
      <summary>
            Checks if a file exists.
            </summary>
      <param name="name">Name of the file (form item name)</param>
      <returns>
      </returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpFileCollection.Add(Griffin.Networking.Http.Protocol.IHttpFile)">
      <summary>
            Add a new file.
            </summary>
      <param name="file">File to add.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpFileCollection.Clear">
      <summary>
            Remove all files from disk.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpFileCollection.Item(System.String)">
      <summary>
            Get a file
            </summary>
      <param name="name">Name in form</param>
      <returns>File if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpFileCollection.Count">
      <summary>
            Gets number of files
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IHeaderItem">
      <summary>
            Header in a message
            </summary>
      <remarks>
            Important! Each header should override ToString() 
            and return it's data correctly formatted as a HTTP header value.
            </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IHeaderItem.Is(System.String)">
      <summary>
            Does a case insensitive compare with the specified value
            </summary>
      <param name="value">Value to compare our value with</param>
      <returns>true if equal; otherwase false;</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IHeaderItem.HasParameter(System.String)">
      <summary>
            Checks if the header has the specified parameter
            </summary>
      <param name="name">Parameter name</param>
      <returns>true if equal; otherwase false;</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IHeaderItem.GetParameter(System.String)">
      <summary>
            Get a parameter from the header
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHeaderItem.Name">
      <summary>
            Gets header name
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHeaderItem.Value">
      <summary>
            Gets value as it would be sent back to client.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderItem.Is(System.String)">
      <summary>
            Does a case insensitive compare with the specified value
            </summary>
      <param name="value">Value to compare our value with</param>
      <returns>true if equal; otherwase false;</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderItem.HasParameter(System.String)">
      <summary>
            Checks if the header has the specified parameter
            </summary>
      <param name="name">Parameter name</param>
      <returns>true if equal; otherwase false;</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderItem.GetParameter(System.String)">
      <summary>
            Get a parameter from the header
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpHeaderItem.Name">
      <summary>
            Gets header name
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpHeaderItem.Value">
      <summary>
            Gets value as it would be sent back to client.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IHeaderCollection">
      <summary>
            Collection of headers.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHeaderCollection.Item(System.String)">
      <summary>
            Gets a header
            </summary>
      <param name="name">header name.</param>
      <returns>value if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpHeaderCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpHeaderCollection.Item(System.String)">
      <summary>
            Gets a header
            </summary>
      <param name="name">header name.</param>
      <returns>value if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IMessage">
      <summary>
            Base interface for request and response.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IMessage.ProtocolVersion">
      <summary>
            Gets current protocol version
            </summary>
      <value>
            Default is HTTP/1.1
            </value>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IMessage.Body">
      <summary>
            Gets or sets body stream.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IMessage.ContentLength">
      <summary>
            Gets number of bytes in the body
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IMessage.ContentEncoding">
      <summary>
            Gets or sets content encoding
            </summary>
      <remarks>Appended to the contentType header as "charset" parameter.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IMessage.Headers">
      <summary>
            Gets headers.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpMessage.ProtocolVersion">
      <summary>
            Gets current protocol version
            </summary>
      <value>
            Default is HTTP/1.1
            </value>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpMessage.Body">
      <summary>
            Gets or sets body stream (null per default unless it's a request where a body where sent)
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpMessage.ContentLength">
      <summary>
            Gets number of bytes in the body
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpMessage.ContentEncoding">
      <summary>
            Gets or sets content encoding
            </summary>
      <remarks>Appended to the contentType header as "charset" parameter.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpMessage.Headers">
      <summary>
            Gets headers.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IRequest">
      <summary>
            Request sent to/from a HTTP server.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IRequest.CreateResponse(System.Net.HttpStatusCode,System.String)">
      <summary>
            Create a response for the request.
            </summary>
      <param name="code">Status code</param>
      <param name="reason">Gives the remote end point a hint to why the specified status code as used.</param>
      <returns>Created response</returns>
      <remarks>Can be used by implementations to transfer context specific information. It's prefered that you use this method
            instead of instantianting a response directly.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.KeepAlive">
      <summary>
            Gets or sets if connection is being kept alive
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.ContentType">
      <summary>
            Gets content type
            </summary>
      <remarks>Any extra parameters are stripped. Use <see cref="!:Headers" /> to get the raw value</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.Cookies">
      <summary>
            Gets cookies.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.Files">
      <summary>
            Gets all uploaded files.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.Form">
      <summary>
            Gets form parameters.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.RemoteEndPoint">
      <summary>
            Gets where the request originated from.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.IsAjax">
      <summary>
            Gets if request is an Ajax request.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.Method">
      <summary>
            Gets or sets HTTP method.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.QueryString">
      <summary>
            Gets query string.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IRequest.Uri">
      <summary>
            Gets requested URI.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpRequest.CreateResponse(System.Net.HttpStatusCode,System.String)">
      <summary>
            Create a response for the request.
            </summary>
      <param name="code">Status code</param>
      <param name="reason">Gives the remote end point a hint to why the specified status code as used.</param>
      <returns>Created response</returns>
      <remarks>Can be used by implementations to transfer context specific information. It's prefered that you use this method
            instead of instantianting a response directly.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.KeepAlive">
      <summary>
            Gets or sets if connection is being kept alive
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.ContentType">
      <summary>
            Gets content type
            </summary>
      <remarks>Any extra parameters are stripped. Use <see cref="!:Headers" /> to get the raw value</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.Cookies">
      <summary>
            Gets cookies.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.Files">
      <summary>
            Gets all uploaded files.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.Form">
      <summary>
            Gets form parameters.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.RemoteEndPoint">
      <summary>
            Gets where the request originated from.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.IsAjax">
      <summary>
            Gets if request is an Ajax request.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.Method">
      <summary>
            Gets or sets HTTP method.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.QueryString">
      <summary>
            Gets query string.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpRequest.Uri">
      <summary>
            Gets requested URI.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.HttpResponse">
      <summary>
            HTTP response implementation.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IResponse">
      <summary>
            Response to a request.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IResponse.Redirect(System.String)">
      <summary>
            Redirect user.
            </summary>
      <param name="uri">Where to redirect to.</param>
      <remarks>
            Any modifications after a redirect will be ignored.
            </remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IResponse.KeepAlive">
      <summary>
            Gets or set if connection should be kept alive.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IResponse.Cookies">
      <summary>
            Gets cookies.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IResponse.StatusDescription">
      <summary>
            Gets a motivation to why the specified status code were selected.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IResponse.StatusCode">
      <summary>
            Status code that is sent to the client.
            </summary>
      <remarks>Default is <see cref="F:System.Net.HttpStatusCode.OK" /></remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IResponse.ContentType">
      <summary>
             Gets or sets content type
            </summary>
      <remarks>Only the mime type</remarks>
      <seealso cref="P:Griffin.Networking.Http.Protocol.IMessage.ContentEncoding" />
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpResponse.Redirect(System.String)">
      <summary>
            Redirect user.
            </summary>
      <param name="uri">Where to redirect to.</param>
      <remarks>
            Any modifications after a redirect will be ignored.
            </remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpResponse.KeepAlive">
      <summary>
            Gets or set if connection should be kept alive.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpResponse.Cookies">
      <summary>
            Gets cookies.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpResponse.StatusDescription">
      <summary>
            Gets a motivation to why the specified status code were selected.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpResponse.StatusCode">
      <summary>
            Status code that is sent to the client.
            </summary>
      <remarks>Default is <see cref="F:System.Net.HttpStatusCode.OK" /></remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpResponse.ContentType">
      <summary>
             Gets or sets content type
            </summary>
      <remarks>Only the mime type</remarks>
      <seealso cref="P:Griffin.Networking.Http.Protocol.IMessage.ContentEncoding" />
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.IHttpParser">
      <summary>
            Parses HTTP messages
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.IHttpParser.Reset">
      <summary>
            Reset parser to initial state.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.Infrastructure.UrlDecoder">
      <summary>
            Parses query string
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.Infrastructure.UrlDecoder.Parse(System.IO.TextReader,Griffin.Networking.Http.IParameterCollection)">
      <summary>
            Parse a query string
            </summary>
      <param name="reader">string to parse</param>
      <param name="parameters">Parameter collection to fill</param>
      <returns>A collection</returns>
      <exception cref="T:System.ArgumentNullException">
        <c>reader</c> is <c>null</c>.</exception>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.Infrastructure.UrlDecoder.Parse(System.String)">
      <summary>
            Parse a query string
            </summary>
      <param name="queryString">string to parse</param>
      <returns>A collection</returns>
      <exception cref="T:System.ArgumentNullException">
        <c>queryString</c> is <c>null</c>.</exception>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IParameter">
      <summary>
            Parameter in <see cref="T:Griffin.Networking.Http.IParameterCollection" /></summary>
    </member>
    <member name="M:Griffin.Networking.Http.Protocol.IParameter.Add(System.String)">
      <summary>
            Add a new parameter value
            </summary>
      <param name="value">Value to add</param>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IParameter.Value">
      <summary>
            Gets *last* value.
            </summary>
      <remarks>
            Parameters can have multiple values. This property will always get the last value in the list.
            </remarks>
      <value>String if any value exist; otherwise <c>null</c>.</value>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IParameter.Name">
      <summary>
            Gets or sets name.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IParameter.Item(System.Int32)">
      <summary>
            Get one of the values.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IParameter.Count">
      <summary>
            Get number of values
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.Parameter.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.Parameter.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.Parameter.Add(System.String)">
      <summary>
            Add a new parameter value
            </summary>
      <param name="value">Value to add</param>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.Parameter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.Parameter.Values">
      <summary>
            Gets a list of all values.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.Parameter.Value">
      <summary>
            Gets *last* value.
            </summary>
      <remarks>
            Parameters can have multiple values. This property will always get the last value in the list.
            </remarks>
      <value>String if any value exist; otherwise <c>null</c>.</value>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.Parameter.Name">
      <summary>
            Gets or sets name.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.Parameter.Item(System.Int32)">
      <summary>
            Get one of the values.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.Parameter.Count">
      <summary>
            Get number of values
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.IParameterCollection">
      <summary>
            Collection of parameters
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.IParameterCollection.Get(System.String)">
      <summary>
            Get a parameter.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Griffin.Networking.Http.IParameterCollection.Add(System.String,System.String)">
      <summary>
            Add a query string parameter.
            </summary>
      <param name="name">Parameter name</param>
      <param name="value">Value</param>
    </member>
    <member name="M:Griffin.Networking.Http.IParameterCollection.Exists(System.String)">
      <summary>
            Checks if the specified parameter exists
            </summary>
      <param name="name">Parameter name.</param>
      <returns>
        <c>true</c> if found; otherwise <c>false</c>;</returns>
    </member>
    <member name="P:Griffin.Networking.Http.IParameterCollection.Count">
      <summary>
            Gets number of parameters.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.IParameterCollection.Item(System.String)">
      <summary>
            Gets last value of an parameter.
            </summary>
      <param name="name">Parameter name</param>
      <returns>String if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.ParameterCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.ParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.ParameterCollection.Get(System.String)">
      <summary>
            Get a parameter.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.ParameterCollection.Add(System.String,System.String)">
      <summary>
            Add a query string parameter.
            </summary>
      <param name="name">Parameter name</param>
      <param name="value">Value</param>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.ParameterCollection.Exists(System.String)">
      <summary>
            Checks if the specified parameter exists
            </summary>
      <param name="name">Parameter name.</param>
      <returns>
        <c>true</c> if found; otherwise <c>false</c>;</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.ParameterCollection.Clear">
      <summary>
            Remove all item
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.ParameterCollection.Count">
      <summary>
            Gets number of parameters.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.ParameterCollection.Item(System.String)">
      <summary>
            Gets last value of an parameter.
            </summary>
      <param name="name">Parameter name</param>
      <returns>String if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Messages.HttpError">
      <summary>
            An error was caught during processing.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.HttpParser">
      <summary>
            A HTTP parser implementation.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpParser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Pipeline.Handlers.HeaderDecoder" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpParser.Reset">
      <summary>
            Reset parser to initial state.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpParser.GetHeaderName">
      <summary>
            Try to find a header name.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpParser.GetHeaderValue">
      <summary>
            Get header values.
            </summary>
      <returns>
      </returns>
      <remarks>Will also look for multi header values and automatically merge them to one line.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpParser.OnFirstLine(System.String[])">
      <summary>
            First message line.
            </summary>
      <param name="words">Will always contain three elements.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpParser.ParseFirstLine">
      <summary>
            Parses the first line in a request/response.
            </summary>
      <returns>
        <c>true</c> if first line is well formatted; otherwise <c>false</c>.</returns>
    </member>
    <member name="P:Griffin.Networking.Http.IResponseCookie.Expires">
      <summary>
            Gets when the cookie expires.
            </summary>
      <remarks>
        <see cref="F:System.DateTime.MinValue" /> means that the cookie expires when the session do so.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.IResponseCookie.Path">
      <summary>
            Gets path that the cookie is valid under.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Messages.HttpResponseCookie.Expires">
      <summary>
            Gets when the cookie expires.
            </summary>
      <remarks>
        <see cref="F:System.DateTime.MinValue" /> means that the cookie expires when the session do so.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Messages.HttpResponseCookie.Path">
      <summary>
            Gets path that the cookie is valid under.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Messages.ReceivedHttpRequest">
      <summary>
            Received a new http request.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Pipeline.Messages.SendHttpResponse">
      <summary>
            Sned a new HTTP resposne
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Pipeline.Messages.SendHttpResponse.#ctor(Griffin.Networking.Http.Protocol.IRequest,Griffin.Networking.Http.Protocol.IResponse)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Pipeline.Messages.SendHttpResponse" /> class.
            </summary>
      <param name="request">The request that the response is for.</param>
      <param name="response">Response to send.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Pipeline.Messages.SendHttpResponse.Request">
      <summary>
            Gets request that the response is for
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Pipeline.Messages.SendHttpResponse.Response">
      <summary>
            Gets actual response
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.NameValueParser">
      <summary>
            Parses a namevalue collection
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.NameValueParser.Parse(System.String,Griffin.Networking.Http.IParameterCollection)">
      <summary>
            Parse string
            </summary>
      <param name="value">contains "a=b,c=d" etc</param>
      <param name="target">Collection to fill with the values</param>
    </member>
    <member name="T:Griffin.Networking.Http.Protocol.IHttpFile">
      <summary>
            A file included in a HTTP request.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpFile.ContentType">
      <summary>
            Gets or sets content type.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpFile.Name">
      <summary>
            Gets or sets name in form.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpFile.OriginalFileName">
      <summary>
            Gets or sets name original file name
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Protocol.IHttpFile.TempFileName">
      <summary>
            Gets or sets filename for locally stored file.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Implementation.HttpFile">
      <summary>
            A HTTP file in a request.
            </summary>
      <remarks>The temporary file will be deleted when the request/response ends.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Implementation.HttpFile.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpFile.Name">
      <summary>
            Gets or sets form element name
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpFile.OriginalFileName">
      <summary>
            Gets or sets client side file name
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpFile.ContentType">
      <summary>
            Gets or sets mime content type
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Implementation.HttpFile.TempFileName">
      <summary>
            Gets or sets full path to local file
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Server.HttpContext">
      <summary>
            Request context
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IHttpContext">
      <summary>
            Request context information
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IHttpContext.RegisterForDisposal(System.Action{Griffin.Networking.Http.Server.IHttpContext})">
      <summary>
            Register a callback for the request disposal (i.e. the reply have been sent back and everything is cleaned up)
            </summary>
      <param name="callback">Callback to invoke</param>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.Request">
      <summary>
            Incoming request
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.Response">
      <summary>
            Response to send back
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.Items">
      <summary>
            Can be used to store items through this request
            </summary>
      <remarks>Items which are stored for the current request only</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.Application">
      <summary>
            Used to store items for the entire application.
            </summary>
      <remarks>These items are shared between all requests and users</remarks>
      <seealso cref="P:Griffin.Networking.Http.Server.HttpServer.ApplicationInfo" />
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.Session">
      <summary>
            USed to store items for the current session (if a session has been started)
            </summary>
      <remarks>Will be null if a session has not been started.
            <para>Shared between all requests for a specific user</para></remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.LastException">
      <summary>
            All exceptions will be logged by the system, but we generally do only keep track of the last one.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.User">
      <summary>
            Gets or sets currently logged in user.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IHttpContext.RouteData">
      <summary>
            Gets information stored for the route.
            </summary>
      <remarks>For instance used to convert the URI into parameters.</remarks>
      <seealso cref="T:Griffin.Networking.Http.Services.Routing.IRequestRouter" />
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.HttpContext" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpContext.RegisterForDisposal(System.Action{Griffin.Networking.Http.Server.IHttpContext})">
      <summary>
            Register a callback for the request disposal (i.e. the reply have been sent back and everything is cleaned up)
            </summary>
      <param name="callback">Callback to invoke</param>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpContext.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.Request">
      <summary>
            Incoming request
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.Response">
      <summary>
            Response to send back
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.Items">
      <summary>
            Can be used to store items through this request
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.Application">
      <summary>
            Used to store items for the entire application.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.Session">
      <summary>
            USed to store items for the current session (if a session has been started)
            </summary>
      <remarks>Will be null if a session has not been started.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.LastException">
      <summary>
            All exceptions will be logged by the system, but we generally do only keep track of the last one.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.User">
      <summary>
            Gets or sets currently logged in user.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpContext.RouteData">
      <summary>
            Gets information stored for the route.
            </summary>
      <remarks>For instance used to convert the URI into parameters.</remarks>
      <seealso cref="T:Griffin.Networking.Http.Services.Routing.IRequestRouter" />
    </member>
    <member name="T:Griffin.Networking.Http.Server.HttpServer">
      <summary>
            Default HTTP Server implementation
            </summary>
      <remarks>This implementation uses modules for everything</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServer.#ctor(Griffin.Networking.Http.Server.IModuleManager)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.HttpServer" /> class.
            </summary>
      <param name="moduleManager">The modules are used to process the HTTP requests. You need to specify at least one.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServer.#ctor(Griffin.Networking.Http.Server.IModuleManager,Griffin.Networking.Messaging.MessagingServerConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.HttpServer" /> class.
            </summary>
      <param name="moduleManager">The modules are used to process the HTTP requests. You need to specify at least one.</param>
      <param name="configuration">You can override the configuration to your likings. We suggest that you using the <see cref="T:Griffin.Networking.Http.HttpMessageFactory" /> to produce the messages.</param>
      <exception cref="T:System.ArgumentNullException">moduleManager/configuration</exception>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServer.CreateClient(System.Net.EndPoint)">
      <summary>
            Create a new client
            </summary>
      <param name="remoteEndPoint">IP address of the remote end point</param>
      <returns>Created client</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServer.Add(Griffin.Networking.Http.Server.IHttpModule)">
      <summary>
            Add a HTTP module
            </summary>
      <param name="module">Module to include</param>
      <remarks>Modules are executed in the order they are added.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServer.Start(System.Net.IPAddress,System.Int32)">
      <summary>
            Start the HTTP server
            </summary>
      <param name="ipAddress">Address to listen on</param>
      <param name="port">Port to listen on.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpServer.ApplicationInfo">
      <summary>
            You can fill this item with application specific information
            </summary>
      <remarks>It will be supplied for every request in the <see cref="T:Griffin.Networking.Http.Server.IHttpContext" />.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Server.HttpServerWorker">
      <summary>
            One instance per HTTP connection
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServerWorker.#ctor(System.Net.IPEndPoint,Griffin.Networking.Http.Server.WorkerConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.HttpServerWorker" /> class.
            </summary>
      <param name="remoteEndPoint">The remote end point.</param>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServerWorker.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Server.HttpServerWorker.HandleReceive(System.Object)">
      <summary>
            A new message have been received from the remote end.
            </summary>
      <param name="message">
      </param>
      <remarks>You'll receive <see cref="T:Griffin.Networking.Http.Protocol.IRequest" /> or <see cref="T:Griffin.Networking.Http.Protocol.IResponse" /> depending on the type of application.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Server.HttpServerWorker.RemoteEndPoint">
      <summary>
            Gets end point that the client connected from
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IAuthenticationModule">
      <summary>
            The HTTP module is used to authenticate the request (i.e. login the user)
            </summary>
      <remarks>Invoked directly after <see cref="M:Griffin.Networking.Http.Server.IHttpModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)" /></remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IHttpModule">
      <summary>
            A http module
            </summary>
      <remarks>
            Each method will be invoked in all methods before continuing. i.e. the <c>BegingRequest</c> method will be invoked in
            all modules before the next method is invoked (which typically is <c>RouteRequest</c>).
            <para>Abort
            means only that the current method will be aborted for the modules. (EndRequest will still be invoked if you trigger
            abort in any of the methods</para></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IHttpModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoked before anything else
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.
            <para>If you are going to handle the request, implement <see cref="T:Griffin.Networking.Http.Server.IWorkerModule" /> and do it in the <see cref="M:Griffin.Networking.Http.Server.IWorkerModule.HandleRequest(Griffin.Networking.Http.Server.IHttpContext)" /> method.</para></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IAuthenticationModule.Authenticate(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Authorize the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing including <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IAuthorizationModule">
      <summary>
            Authorize the request (i.e. check the user permissions)
            </summary>
      <remarks>Invoked after <see cref="T:Griffin.Networking.Http.Server.IAuthenticationModule" /> and before <see cref="!:IHttpModule.HandleRequest" />.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IAuthorizationModule.Authorize(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Authorize the user.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing including <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IItemStorage">
      <summary>
            Abstraction used for different storages.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.IItemStorage.Item(System.String)">
      <summary>
            Get or set an item
            </summary>
      <param name="name">Case insensitive name</param>
      <returns>Item if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IModuleManager">
      <summary>
            Takes care of the module execution.
            </summary>
      <remarks>Will catch all exceptions and also log them including the request information. 
            
            It will however not do anything with the exception. You either have to have an error module which checks <see cref="P:Griffin.Networking.Http.Server.IHttpContext.LastException" />
            in <c>EndRequest()</c> or override the server to handle the error in it.
            <para>Modules are invoked in the following order
            <list type="number"><item><see cref="M:Griffin.Networking.Http.Server.IHttpModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)" /></item><item><see cref="T:Griffin.Networking.Http.Server.IRoutingModule" /></item><item><see cref="T:Griffin.Networking.Http.Server.IAuthenticationModule" /></item><item><see cref="T:Griffin.Networking.Http.Server.IAuthorizationModule" /></item><item><see cref="T:Griffin.Networking.Http.Server.IWorkerModule" /></item><item><see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" /></item></list></para></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IModuleManager.Add(Griffin.Networking.Http.Server.IHttpModule)">
      <summary>
            Add a HTTP module
            </summary>
      <param name="module">Module to include</param>
      <remarks>Modules are executed in the order they are added.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IModuleManager.Invoke(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoke all modules
            </summary>
      <param name="context">
      </param>
      <returns>
        <c>true</c> if no modules have aborted the handling. Any module throwing an exception is also considered to be abort.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IWorkerModule">
      <summary>
            A HTTP module which do something useful with the request.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IWorkerModule.HandleRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Handle the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing except <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
      <remarks>Invoked in turn for all modules unless you return <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" />.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Server.IRoutingModule">
      <summary>
            Used to route requests..
            </summary>
      <remarks>Invoked after <see cref="T:Griffin.Networking.Http.Server.IAuthenticationModule" /> but before <see cref="T:Griffin.Networking.Http.Server.IAuthorizationModule" />.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.IRoutingModule.Route(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Route the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing including <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
      <remarks>Simply change the request URI to something else.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Server.MemoryItemStorage">
      <summary>
            Uses a Dictionary to store all items
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.MemoryItemStorage.Item(System.String)">
      <summary>
            Get or set an item
            </summary>
      <param name="name">Item name</param>
      <returns>Item if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.ModuleManager">
      <summary>
            Takes care of the module execution.
            </summary>
      <remarks>Will catch all exceptions, the last one is always attached to <see cref="P:Griffin.Networking.Http.Server.IHttpContext.LastException" />.
            
            It will however not do anything with the exception. You either have to have an error module which checks <see cref="P:Griffin.Networking.Http.Server.IHttpContext.LastException" />
            in <c>EndRequest()</c> or override the server to handle the error in it.
            <para>Modules are invoked in the following order
            <list type="number"><item><see cref="M:Griffin.Networking.Http.Server.IHttpModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)" /></item><item><see cref="T:Griffin.Networking.Http.Server.IRoutingModule" /></item><item><see cref="T:Griffin.Networking.Http.Server.IAuthenticationModule" /></item><item><see cref="T:Griffin.Networking.Http.Server.IAuthorizationModule" /></item><item><see cref="T:Griffin.Networking.Http.Server.IWorkerModule" /></item><item><see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" /></item></list></para></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.ModuleManager.Add(Griffin.Networking.Http.Server.IHttpModule)">
      <summary>
            Add a HTTP module
            </summary>
      <param name="module">Module to include</param>
      <remarks>Modules are executed in the order they are added.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.ModuleManager.Invoke(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoke all modules
            </summary>
      <param name="context">
      </param>
      <returns>
        <c>true</c> if no modules have aborted the handling. Any module throwing an exception is also considered to be abort.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.ModuleResult">
      <summary>
            Used to control module behaviour
            </summary>
    </member>
    <member name="F:Griffin.Networking.Http.Server.ModuleResult.Continue">
      <summary>
            Continue with the next module
            </summary>
    </member>
    <member name="F:Griffin.Networking.Http.Server.ModuleResult.Stop">
      <summary>
            Stop processing more modules
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Server.Modules.AuthenticationModule">
      <summary>
            Uses <see cref="T:Griffin.Networking.Http.Services.Authentication.IAuthenticator" /> to authenticate requests and then <see cref="T:Griffin.Networking.Http.Services.Authentication.IPrincipalFactory" /> to generate the user information.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.AuthenticationModule.#ctor(Griffin.Networking.Http.Services.Authentication.IAuthenticator,Griffin.Networking.Http.Services.Authentication.IPrincipalFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.Modules.AuthenticationModule" /> class.
            </summary>
      <param name="authenticator">Used for the actual authentication.</param>
      <param name="principalFactory">Used to create the principal that should be used.</param>
      <exception cref="T:System.ArgumentNullException">autheonticator</exception>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.AuthenticationModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoked before anything else
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.AuthenticationModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.AuthenticationModule.Authenticate(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Authorize the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing including <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Server.Modules.BodyDecodingModule">
      <summary>
            Will decode the request body into Files/Form
            </summary>
      <remarks>
        <para>Uses the <c>HandleRequest</c> method for the decoding. So you probably want to add this module before any module doing real work.</para>
        <para>Do note that the module with return <see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> if the content type is not supported. You can turn off this behaviour by setting
            <see cref="P:Griffin.Networking.Http.Server.Modules.BodyDecodingModule.BeRude" /> to false.</para>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.BodyDecodingModule.#ctor(Griffin.Networking.Http.Services.IBodyDecoder[])">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.Modules.BodyDecodingModule" /> class.
            </summary>
      <param name="decoders">One or more decoders.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.BodyDecodingModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoked before anything else
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.BodyDecodingModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.BodyDecodingModule.HandleRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Handle the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing except <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
      <remarks>Invoked in turn for all modules unless you return <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" />.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Server.Modules.BodyDecodingModule.BeRude">
      <summary>
            Gets or sets if we should set 
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Server.Modules.ErrorModule">
      <summary>
            Reports errors to different sources.
            </summary>
      <example>
        <code><![CDATA[
            var module = new ErrorModule();
            module.SendEmailTo("arne@somewhere.com", "myWebserver@mydomain.com");
            module.SendEmailTo("webmaster@mydomain.com", "myWebserver@mydomain.com");
            module.BuildCustomErrorPage(context => "<html><body>Opps, fail with exception: " + context.LastException + ". Too bad :(</html></body>");
            module.LogDetails(details => _logger.Error("Request failed: " + details);
            module.LogDetails(details => EventLog.WriteEntry(details);
            ]]></code>
      </example>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.ErrorModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoked before anything else
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.ErrorModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.ErrorModule.SendEmailTo(System.String,System.String)">
      <summary>
            Send the error to an email address
            </summary>
      <param name="toAddress">Recipient.</param>
      <param name="fromAddress">Who the mail should be sent from.</param>
      <remarks>You have to configure your SMTP server in app.config under system.net. google.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.ErrorModule.LogDetails(System.Action{System.String})">
      <summary>
            Log error details to somemwhere
            </summary>
      <param name="action">
      </param>
      <remarks>Will include request information, the logged in user and the exception details.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.ErrorModule.BuildCustomErrorPage(System.Func{Griffin.Networking.Http.Server.IHttpContext,System.String})">
      <summary>
            Build a custom error page
            </summary>
      <param name="action">Should return a string which corresponds to the error page that should be displayed.</param>
    </member>
    <member name="T:Griffin.Networking.Http.Server.Modules.FileModule">
      <summary>
            Will serve static files
            </summary>
      <example>
        <code>
            // One of the available file services.
            var diskFiles = new DiskFileService("/public/", @"C:\www\public\");
            var module = new FileModule(diskFiles);
            
            // the module manager is added to the HttpServer.
            var moduleManager = new ModuleManager();
            moduleManager.Add(module);
            </code>
      </example>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.FileModule.#ctor(Griffin.Networking.Http.Services.Files.IFileService)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Server.Modules.FileModule" /> class.
            </summary>
      <param name="fileService">The file service.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.FileModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoked before anything else
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.
            <para>If you are going to handle the request, implement <see cref="T:Griffin.Networking.Http.Server.IWorkerModule" /> and do it in the <see cref="M:Griffin.Networking.Http.Server.IWorkerModule.HandleRequest(Griffin.Networking.Http.Server.IHttpContext)" /> method.</para></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.FileModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.FileModule.HandleRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Handle the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing except <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
      <remarks>Invoked in turn for all modules unless you return <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" />.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Server.Modules.RouterModule">
      <summary>
            Used to route the request.
            </summary>
      <remarks>You may either simply rewrite the request URI or by using a response redirect.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.RouterModule.BeginRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Invoked before anything else
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The first method that is exeucted in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.RouterModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            End request is typically used for post processing. The response should already contain everything required.
            </summary>
      <param name="context">HTTP context</param>
      <remarks>
        <para>The last method that is executed in the pipeline.</para>
            Try to avoid throwing exceptions if you can. Let all modules have a chance to handle this method. You may break the processing in any other method than the Begin/EndRequest methods.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.RouterModule.Route(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Route the request.
            </summary>
      <param name="context">HTTP context</param>
      <returns>
        <see cref="F:Griffin.Networking.Http.Server.ModuleResult.Stop" /> will stop all processing including <see cref="M:Griffin.Networking.Http.Server.IHttpModule.EndRequest(Griffin.Networking.Http.Server.IHttpContext)" />.</returns>
      <remarks>Simply change the request URI to something else.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Server.Modules.RouterModule.Add(Griffin.Networking.Http.Services.Routing.IRequestRouter)">
      <summary>
            Add a new router
            </summary>
      <param name="router">Router</param>
    </member>
    <member name="T:Griffin.Networking.Http.Server.RequestExtensions">
      <summary>
            Used to build error info.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Server.WorkerConfiguration">
      <summary>
            Configuration for <see cref="T:Griffin.Networking.Http.Server.HttpServerWorker" />.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Server.WorkerConfiguration.Application">
      <summary>
            Used to store items for the entire application.
            </summary>
      <remarks>These items are shared between all requests and suers</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.IAuthenticator">
      <summary>
            Used to authenticate the user.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.IAuthenticator.CreateChallenge(Griffin.Networking.Http.Protocol.IRequest,Griffin.Networking.Http.Protocol.IResponse)">
      <summary>
            Create a WWW-Authorize header
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.IAuthenticator.Authenticate(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Authorize a request.
            </summary>
      <param name="request">Request being authenticated</param>
      <returns>Authenticated user if successful; otherwise null.</returns>
      <exception cref="T:Griffin.Networking.Http.HttpException">403 Forbidden if the nonce is incorrect.</exception>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.IAuthenticator.AuthenticationScheme">
      <summary>
            Gets name of the authentication scheme
            </summary>
      <remarks>"BASIC", "DIGEST" etc.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.BasicAuthentication.CreateChallenge(Griffin.Networking.Http.Protocol.IRequest,Griffin.Networking.Http.Protocol.IResponse)">
      <summary>
            Create a WWW-Authorize header
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.BasicAuthentication.Authenticate(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Authorize a request.
            </summary>
      <param name="request">Request being authenticated</param>
      <returns>Authenticated user if successful; otherwise null.</returns>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.BasicAuthentication.Scheme">
      <summary>
            Gets authenticator scheme
            </summary>
      <value>
      </value>
      <example>
            digest
            </example>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.BasicAuthentication.AuthenticationScheme">
      <summary>
            Gets name of the authentication scheme
            </summary>
      <remarks>"BASIC", "DIGEST" etc.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator">
      <summary>
            Implements Digest authentication.
            </summary>
      <remarks>Read RFC 2617 for more information</remarks>
    </member>
    <member name="F:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.DisableNonceCheck">
      <summary>
            Used by test classes to be able to use hardcoded values
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.#ctor(Griffin.Networking.Http.Services.Authentication.IRealmRepository,Griffin.Networking.Http.Services.Authentication.IAccountStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator" /> class.
            </summary>
      <param name="realmRepository">Used to lookup the realm for a HTTP request</param>
      <param name="userService">Supplies users during authentication process.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.CreateChallenge(Griffin.Networking.Http.Protocol.IRequest,Griffin.Networking.Http.Protocol.IResponse)">
      <summary>
            Create a WWW-Authorize header
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.Encrypt(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Encrypts parameters into a Digest string
            </summary>
      <param name="realm">Realm that the user want to log into.</param>
      <param name="userName">User logging in</param>
      <param name="password">Users password.</param>
      <param name="method">HTTP method.</param>
      <param name="uri">Uri/domain that generated the login prompt.</param>
      <param name="qop">Quality of Protection.</param>
      <param name="nonce">"Number used ONCE"</param>
      <param name="nc">Hexadecimal request counter.</param>
      <param name="cnonce">"Client Number used ONCE"</param>
      <returns>Digest encrypted string</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.Encrypt(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
      </summary>
      <param name="ha1">Md5 hex encoded "userName:realm:password", without the quotes.</param>
      <param name="ha2">Md5 hex encoded "method:uri", without the quotes</param>
      <param name="qop">Quality of Protection</param>
      <param name="nonce">"Number used ONCE"</param>
      <param name="nc">Hexadecimal request counter.</param>
      <param name="cnonce">Client number used once</param>
      <returns>
      </returns>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.GetMd5HashBinHex(System.String)">
      <summary>
            Gets the Md5 hash bin hex2.
            </summary>
      <param name="toBeHashed">To be hashed.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.Scheme">
      <summary>
            Gets authenticator scheme
            </summary>
      <value>
      </value>
      <example>
            digest
            </example>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.DigestAuthenticator.AuthenticationScheme">
      <summary>
            Gets name of the authentication scheme
            </summary>
      <remarks>"BASIC", "DIGEST" etc.</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.Digest.Nonce">
      <summary>
            Used to keep track of a Digest authentication nonce
            </summary>
      <remarks>Only five attempts may be made.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.Nonce.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Authentication.Digest.Nonce" /> class.
            </summary>
      <param name="expires">When nonce expires.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.Nonce.Validate(System.Int32)">
      <summary>
            Check if the nonce can be used.
            </summary>
      <param name="value">
      </param>
      <returns>true if counter is currently unused and within the range; otherwise false;</returns>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.Digest.Nonce.PassedCounts">
      <summary>
            Gets all passed counts.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.Digest.Nonce.LastUpdate">
      <summary>
            Gets time for last attempt.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.Digest.Nonce.Expired">
      <summary>
            Gets if nonce has expired.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.Digest.NonceService">
      <summary>
            Monitors all nonces.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Authentication.Digest.NonceService" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Authentication.Digest.NonceService" /> class.
            </summary>
      <param name="expiresTimeout">How long a nonce is valid, default is 15 seconds.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.IsValid(System.String,System.Int32)">
      <summary>
            Checks if a nonce is valid
            </summary>
      <param name="value">nonce value</param>
      <param name="counter">nc counter</param>
      <returns>true if nonce is valid; otherwise false.</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.CreateNonce">
      <summary>
            Create a new nonce
            </summary>
      <returns>Created nonce.</returns>
      <remarks>Valid Time span is configured in the <see cref="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.#ctor(System.TimeSpan)" /> constructor. Default time is 15 seconds.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.Digest.NonceService.Sweep(System.Object)">
      <summary>
            Remove expired nonces.
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.HostAsRealmRepository">
      <summary>
            Uses <c>request.Uri.Host</c> as realm.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.IRealmRepository">
      <summary>
            Returns the realm for a request.
            </summary>
      <remarks>Realms are used during authentication</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.IRealmRepository.GetRealm(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Gets the realm for a request
            </summary>
      <param name="request">Request which realm we want to get</param>
      <returns>The realm that the request belongs to</returns>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.HostAsRealmRepository.GetRealm(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Gets the realm for a request
            </summary>
      <param name="request">Request which realm we want to get</param>
      <returns>The realm that the request belongs to</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.IAccountStorage">
      <summary>
            Provider returning user to be authenticated.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.IAccountStorage.Lookup(System.String,System.Uri)">
      <summary>
            Lookups the specified user
            </summary>
      <param name="userName">User name.</param>
      <param name="host">Typically web server domain name.</param>
      <returns>User if found; otherwise <c>null</c>.</returns>
      <remarks>
            User name can basically be anything. For instance name entered by user when using
            basic or digest authentication, or SID when using Windows authentication.
            </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.IAuthenticationUser">
      <summary>
            User information used during authentication process.
            </summary>
      <remarks>The </remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.IAuthenticationUser.Username">
      <summary>
            Gets or sets user name used during authentication.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.IAuthenticationUser.Password">
      <summary>
            Gets or sets unencrypted password.
            </summary>
      <remarks>
            Password as clear text. You could use <see cref="P:Griffin.Networking.Http.Services.Authentication.IAuthenticationUser.HA1" /> instead if your passwords
            are encrypted in the database.
            </remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.IAuthenticationUser.HA1">
      <summary>
            Gets or sets HA1 hash.
            </summary>
      <remarks>
        <para>
            Digest authentication requires clear text passwords to work. If you
            do not have that, you can store a HA1 hash in your database (which is part of
            the Digest authentication process).
            </para>
        <para>
            A HA1 hash is simply a Md5 encoded string: "UserName:Realm:Password". The quotes should
            not be included. Realm is the currently requested Host (as in <c>Request.Headers["host"]</c>).
            </para>
        <para>
            Leave the string as <c>null</c> if you are not using HA1 hashes.
            </para>
      </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.IUserWithRoles">
      <summary>
            Used to be able to generate <see cref="T:System.Security.Principal.IPrincipal" /> directly.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.IUserWithRoles.RoleNames">
      <summary>
            Get a list of all roles
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.IPrincipalFactory">
      <summary>
            Used to create <see cref="T:System.Security.Principal.IPrincipal" /></summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.IPrincipalFactory.Create(Griffin.Networking.Http.Services.Authentication.PrincipalFactoryContext)">
      <summary>
            Create a new prinicpal
            </summary>
      <param name="context">Context used to identify the user.</param>
      <returns>Principal to use</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.PrincipalFactoryContext">
      <summary>
            Context for <see cref="T:Griffin.Networking.Http.Services.Authentication.IPrincipalFactory" />.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.PrincipalFactoryContext.#ctor(Griffin.Networking.Http.Protocol.IRequest,Griffin.Networking.Http.Services.Authentication.IAuthenticationUser)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Authentication.PrincipalFactoryContext" /> class.
            </summary>
      <param name="request">The request.</param>
      <param name="user">The user.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.PrincipalFactoryContext.User">
      <summary>
            Gets the user which was provided by the <see cref="T:Griffin.Networking.Http.Services.Authentication.IAccountStorage" />.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Authentication.PrincipalFactoryContext.Request">
      <summary>
            Gets the HTTP request.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Authentication.SingleRealmRepository">
      <summary>
            Uses a single realm for all requests.
            </summary>
      <example>
        <code>
            var digestAuthenticator = new DigestAuthenticator(new SingleRealmRepository("DragonsDen"), _myUserService);
            </code>
      </example>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.SingleRealmRepository.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Authentication.SingleRealmRepository" /> class.
            </summary>
      <param name="name">Name of the realm.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Authentication.SingleRealmRepository.GetRealm(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Gets the realm for a request
            </summary>
      <param name="request">Request which realm we want to get</param>
      <returns>The realm that the request belongs to</returns>
    </member>
    <member name="N:Griffin.Networking.Http.Services.Errors">
      <summary>
            Classes used to format the response for uncaught exceptions before the response is sent back to the client.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Errors.SimpleErrorFormatter">
      <summary>
            Used to format all HTTP error messages
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Errors.IErrorFormatter">
      <summary>
            Takes a <see cref="T:System.Exception" /> and formats the <see cref="T:Griffin.Networking.Http.Protocol.IResponse" /> accordingly.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Errors.IErrorFormatter.Format(Griffin.Networking.Http.Services.Errors.ErrorFormatterContext)">
      <summary>
            Format the response into something that the user understands.
            </summary>
      <param name="context">Context providing information for the error message generation</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Errors.SimpleErrorFormatter.Format(Griffin.Networking.Http.Services.Errors.ErrorFormatterContext)">
      <summary>
            Format the response into something that the user understands.
            </summary>
      <param name="context">Context providing information for the error message generation</param>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Errors.ErrorFormatterContext">
      <summary>
            Context for the error formatters.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Errors.ErrorFormatterContext.#ctor(System.Exception,Griffin.Networking.Http.Protocol.IRequest,Griffin.Networking.Http.Protocol.IResponse)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Errors.ErrorFormatterContext" /> class.
            </summary>
      <param name="exception">The exception.</param>
      <param name="request">The request.</param>
      <param name="response">The response.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Errors.ErrorFormatterContext.Exception">
      <summary>
            Gets thrown exception
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Errors.ErrorFormatterContext.Response">
      <summary>
            Gets the response which will be sent back
            </summary>
      <remarks>The status code corresponds to the thrown exception. Fill the body with your error message.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Errors.ErrorFormatterContext.Request">
      <summary>
            Gets request which was handled when the error was generated.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Files.MimeTypeProvider">
      <summary>
            All available mime types
            </summary>
      <remarks>All mime types in here can be served by the file modules. All other files are ignored.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.MimeTypeProvider.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:Griffin.Networking.Http.Services.Files.MimeTypeProvider" /> class from being created.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.MimeTypeProvider.Add(System.String,System.String)">
      <summary>
            Add a mimn type
            </summary>
      <param name="extension">Extension without dot</param>
      <param name="mimeType">The mime type</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.MimeTypeProvider.Remove(System.String)">
      <summary>
            Remove a mime type
            </summary>
      <param name="extension">extension without dot</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.MimeTypeProvider.Get(System.String)">
      <summary>
            Get mime type for the specified file
            </summary>
      <param name="filename">Full path to file</param>
      <returns>Mime type</returns>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.MimeTypeProvider.Instance">
      <summary>
            Gets singleton
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.IBodyDecoder">
      <summary>
            Decodes body stream into the Form/Files properties.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.IBodyDecoder.Decode(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Decode body stream
            </summary>
      <param name="message">Contains the body to decode.</param>
      <exception cref="T:Griffin.Networking.Http.BadRequestException">Body format is invalid for the specified content type.</exception>
      <returns>
        <c>true</c> if the body was decoded; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.BodyDecoders.Mono.HttpMultipart">
      <summary>
             Stream-based multipart handling.
            
             In this incarnation deals with an HttpInputStream as we are now using
             IntPtr-based streams instead of byte [].   In the future, we will also
             send uploads above a certain threshold into the disk (to implement
             limit-less HttpInputFiles). 
             </summary>
      <remarks>
             Taken from HttpRequest in mono (http://www.mono-project.com)
             </remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.BodyDecoders.MultipartDecoder">
      <summary>
            Decodes multipart files.
            </summary>
    </member>
    <member name="F:Griffin.Networking.Http.Services.BodyDecoders.MultipartDecoder.FormData">
      <summary>
            form-data
            </summary>
    </member>
    <member name="F:Griffin.Networking.Http.Services.BodyDecoders.MultipartDecoder.MimeType">
      <summary>
            multipart/form-data
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.BodyDecoders.MultipartDecoder.ContentTypes">
      <summary>
            All content types that the decoder can parse.
            </summary>
      <returns>A collection of all content types that the decoder can handle.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.BodyDecoders.UrlFormattedDecoder">
      <summary>
            Decodes URL encoded values.
            </summary>
    </member>
    <member name="F:Griffin.Networking.Http.Services.BodyDecoders.UrlFormattedDecoder.MimeType">
      <summary>
            The mimetype that this decoder is for.
            </summary>
      <value>application/x-www-form-urlencoded</value>
    </member>
    <member name="M:Griffin.Networking.Http.Services.BodyDecoders.UrlFormattedDecoder.Decode(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Decode body stream
            </summary>
      <param name="message">Contains the body to decode.</param>
      <exception cref="T:System.FormatException">Body format is invalid for the specified content type.</exception>
    </member>
    <member name="P:Griffin.Networking.Http.Services.BodyDecoders.UrlFormattedDecoder.ContentTypes">
      <summary>
            All content types that the decoder can parse.
            </summary>
      <returns>A collection of all content types that the decoder can handle.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.BodyDecoders.CompositeBodyDecoder">
      <summary>
            Can provide one or more decoders.
            </summary>
      <remarks>The default implementation constructor uses <see cref="T:Griffin.Networking.Http.Services.BodyDecoders.UrlFormattedDecoder" /> and <see cref="T:Griffin.Networking.Http.Services.BodyDecoders.MultipartDecoder" /></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.BodyDecoders.CompositeBodyDecoder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.BodyDecoders.CompositeBodyDecoder" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.BodyDecoders.CompositeBodyDecoder.Decode(Griffin.Networking.Http.Protocol.IRequest)">
      <summary>
            Parses the specified message.
            </summary>
      <param name="message">The message.</param>
      <exception cref="T:System.FormatException">Body format is invalid for the specified content type.</exception>
    </member>
    <member name="M:Griffin.Networking.Http.Services.BodyDecoders.CompositeBodyDecoder.Add(System.String,Griffin.Networking.Http.Services.IBodyDecoder)">
      <summary>
            Add another handlers.
            </summary>
      <param name="mimeType">Mime type</param>
      <param name="decoder">The decoder implementation. Must be thread safe.</param>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Files.CompositeFileService">
      <summary>
            Can serve files from multiple services.
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Files.IFileService">
      <summary>
            Serves files
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.IFileService.GetFile(Griffin.Networking.Http.Services.Files.FileContext)">
      <summary>
            Get a file
            </summary>
      <param name="context">Context used to locate and return files</param>
      <remarks>
        <c>true</c> if the file was attached to the response; otherwise false;</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.CompositeFileService.#ctor(Griffin.Networking.Http.Services.Files.IFileService[])">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Files.CompositeFileService" /> class.
            </summary>
      <param name="fileServices">One or more file services.</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.CompositeFileService.GetFile(Griffin.Networking.Http.Services.Files.FileContext)">
      <summary>
            Loops through all services and returns the first matching file.
            </summary>
      <param name="context">Context used to locate and return files</param>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Files.DiskFileService">
      <summary>
            Serves files from the hard drive.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.DiskFileService.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Files.CompositeFileService" /> class.
            </summary>
      <param name="rootFilePath">Path to serve files from.</param>
      <param name="rootUri">Serve all files which are located under this URI</param>
      <example>
        <code>
            var diskFiles = new DiskFileService("/public/", @"C:\www\public\");
            var module = new FileModule(diskFiles);
            
            var moduleManager = new ModuleManager();
            moduleManager.Add(module);
            </code>
      </example>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.DiskFileService.GetFile(Griffin.Networking.Http.Services.Files.FileContext)">
      <summary>
            Get a file
            </summary>
      <param name="context">Context used to locate and return files</param>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Files.FileContext">
      <summary>
            Context used by <see cref="T:Griffin.Networking.Http.Services.Files.IFileService" /> when locating files.
            </summary>
      <remarks>
            There are three scenarios for files:
            <list type="table"><item><term>Not found</term><description>Simply do not change the context, just return from the method.</description></item><item><term>Found but not modified.</term><description>The file UTC date/time is less or equal to <see cref="P:Griffin.Networking.Http.Services.Files.FileContext.BrowserCacheDate" />. Use <see cref="M:Griffin.Networking.Http.Services.Files.FileContext.SetNotModified(System.String)" /> and return</description></item><item><term>Found and newer</term><description>The file UTC date/time is newer than <see cref="P:Griffin.Networking.Http.Services.Files.FileContext.BrowserCacheDate" />. Use <see cref="M:Griffin.Networking.Http.Services.Files.FileContext.SetFile(System.String,System.IO.Stream,System.DateTime)" /> and return.</description></item></list></remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.FileContext.#ctor(Griffin.Networking.Http.Protocol.IRequest,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Files.FileContext" /> class.
            </summary>
      <param name="request">The request.</param>
      <param name="browserCacheDate">Usually the header "If-Modified-Since"</param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.FileContext.SetFile(System.String,System.IO.Stream,System.DateTime)">
      <summary>
            Set file that should be returned.
            </summary>
      <param name="fileName">File name</param>
      <param name="stream">File stream</param>
      <param name="lastModifiedAtUtc">When the file was modified (UTC time).</param>
      <remarks>
        <para>The stream will be disposed by the server after it's being sent</para>
        <para>Use <see cref="M:Griffin.Networking.Http.Services.Files.FileContext.SetNotModified(System.String)" /> if the file has not been modified</para>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Files.FileContext.SetNotModified(System.String)">
      <summary>
            File has not been modified.
            </summary>
      <param name="fileName">File name including extension.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.FileContext.IsFound">
      <summary>
            Gets if file was found;
            </summary>
      <remarks>The stream is not set if the file was found but not modified.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.FileContext.Request">
      <summary>
            Gets the request (the Uri specifies the wanted file)
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.FileContext.BrowserCacheDate">
      <summary>
            Gets date when file was cached in the browser.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.FileContext.LastModifiedAtUtc">
      <summary>
            Gets the date when the file was modified (UTC time)
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.FileContext.FileStream">
      <summary>
            Gets file stream
            </summary>
      <remarks>The server will own the stream</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Services.Files.FileContext.Filename">
      <summary>
            Gets filename
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Routing.DefaultDocumentRouter">
      <summary>
            Will add default document to URIs
            </summary>
      <remarks>works for all directories</remarks>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Routing.IRequestRouter">
      <summary>
            Route a request
            </summary>
      <remarks>First router doing something wins, all routes added after it will not be run.</remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.IRequestRouter.Route(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Route the request.
            </summary>
      <param name="context">HTTP context used to identify the route</param>
      <returns>
        <c>true</c> if we generated some routing; otherwise <c>false</c></returns>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.DefaultDocumentRouter.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Routing.DefaultDocumentRouter" /> class.
            </summary>
      <param name="homeDirectory">Home directory on disk.</param>
      <param name="documentName">Name of the default document.</param>
      <example>
        <code>
            var documentRouter = new DefaultDocumentRouter(@"C:\www\mysite\", "index.html");
            </code>
      </example>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.DefaultDocumentRouter.Route(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Route the request.
            </summary>
      <param name="context">HTTP context used to identify the route</param>
      <returns>
        <c>true</c> if we generated some routing; otherwise <c>false</c></returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Routing.RegexPattern">
      <summary>
            Used to match a single pattern
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.RegexPattern.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.Routing.RegexPattern" /> class.
            </summary>
      <param name="pattern">The pattern.</param>
      <param name="defaults">The defaults.</param>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.RegexPattern.Match(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Match the route and apply the context
            </summary>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.Routing.RegexRouter">
      <summary>
            Uses named regular expressions to identify parameters
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.RegexRouter.Route(Griffin.Networking.Http.Server.IHttpContext)">
      <summary>
            Route the request.
            </summary>
      <param name="context">HTTP context used to identify the route</param>
      <returns>
        <c>true</c> if we generated some routing; otherwise <c>false</c></returns>
    </member>
    <member name="M:Griffin.Networking.Http.Services.Routing.RegexRouter.Add(System.String,System.Object)">
      <summary>
            Add a regex and default values
            </summary>
      <param name="pattern">Pattern. A typical MVC pattern is <![CDATA[@"/(?<controller>[^/]+)/(?<action>[^/]+)?/(?<action>[^/]+).*"]]>.</param>
      <param name="defaults">For MVC it would be <c>new { controller = "home", action = "index", id = null }</c></param>
    </member>
    <member name="T:Griffin.Networking.Http.Services.ViewEngines.IViewEngine">
      <summary>
            A view engine
            </summary>
      <remarks>
        <para>View engines should not try to resolve views in other paths than the specified one.</para>
      </remarks>
    </member>
    <member name="M:Griffin.Networking.Http.Services.ViewEngines.IViewEngine.Render(Griffin.Networking.Http.Services.ViewEngines.ViewEngineContext)">
      <summary>
            Render view
            </summary>
      <param name="context">Context information</param>
      <returns>
        <c>true</c> if this engine rendered the view; otherwise <c>null</c>.</returns>
    </member>
    <member name="T:Griffin.Networking.Http.Services.ViewEngines.ViewContext">
      <summary>
            Context used to identify view etc.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.ViewEngines.ViewContext.ViewPath">
      <summary>
            Gets or sets path to the requested view.
            </summary>
      <remarks>Absolute path (starting with slash) means that the specified view should be used and nothing else. Relative paths means that the <c>Shared</c> path will also be checked. The file extension
            should never be included.</remarks>
    </member>
    <member name="P:Griffin.Networking.Http.Services.ViewEngines.ViewContext.ViewWriter">
      <summary>
            The view should be written to this writer.
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.ViewEngines.ViewContext.Model">
      <summary>
            Model (if specified)
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.ViewEngines.ViewContext.ModuleType">
      <summary>
            Model type
            </summary>
    </member>
    <member name="P:Griffin.Networking.Http.Services.ViewEngines.ViewContext.ViewData">
      <summary>
            Additional view data
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.ViewEngines.ViewNotFoundException">
      <summary>
            The requested view as not located.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.ViewEngines.ViewNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Http.Services.ViewEngines.ViewNotFoundException" /> class.
            </summary>
      <param name="viewPath">The view path.</param>
    </member>
    <member name="P:Griffin.Networking.Http.Services.ViewEngines.ViewNotFoundException.ViewPath">
      <summary>
            Gets view that was not found;
            </summary>
    </member>
    <member name="T:Griffin.Networking.Http.Services.ViewEngines.ViewService">
      <summary>
            Used to render views.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Http.Services.ViewEngines.ViewService.Register(Griffin.Networking.Http.Services.ViewEngines.IViewEngine)">
      <summary>
            Register a view engine.
            </summary>
      <param name="viewEngine">
      </param>
    </member>
    <member name="M:Griffin.Networking.Http.Services.ViewEngines.ViewService.Render(Griffin.Networking.Http.Services.ViewEngines.ViewContext)">
      <summary>
            Render a view
            </summary>
      <param name="context">
      </param>
    </member>
  </members>
</doc>