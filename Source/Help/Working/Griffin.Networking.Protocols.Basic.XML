<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Griffin.Networking.Protocols.Basic</name>
  </assembly>
  <members>
    <member name="T:Griffin.Networking.Protocols.Basic.BasicMessageBuilder">
      <summary>
            Builds messages from incoming data
            </summary>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Griffin.Networking.Protocols.Basic.BasicMessageBuilder" /> class.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageBuilder.Append(Griffin.Networking.Buffers.IBufferReader)">
      <summary>
            Append more bytes to your message building
            </summary>
      <param name="reader">Contains bytes which was received from the other end</param>
      <returns>
        <c>true</c> if a complete message has been built; otherwise <c>false</c>.</returns>
      <remarks>You must handle/read everything which is available in the buffer</remarks>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageBuilder.TryDequeue(System.Object@)">
      <summary>
            Try to dequeue a message
            </summary>
      <param name="message">Message that the builder has built.</param>
      <returns>
        <c>true</c> if a message was available; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageBuilder.ReadHeaderBytes(Griffin.Networking.Buffers.IBufferReader)">
      <summary>
            Read all header bytes from the incoming buffer 
            </summary>
      <param name="stream">The stream.</param>
      <returns>
        <c>false</c> if we have not received all bytes yet; otherwise <c>true</c>.</returns>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageBuilder.ReadBodyBytes(Griffin.Networking.Buffers.IBufferReader)">
      <summary>
            Read all body bytes from the incoming buffer
            </summary>
      <param name="reader">Contains received bytes</param>
      <returns>
        <c>false</c> if we have not received all bytes yet; otherwise <c>true</c>.</returns>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageBuilder.CreatePacket(System.Byte[])">
      <summary>
            Create a new packet from the header bytes.
            </summary>
      <param name="header">Header bytes</param>
      <returns>Created packet (filled with info)</returns>
      <remarks>The packet bytes are described in the <see cref="T:Griffin.Networking.Protocols.Basic.Packet" /> class doc.</remarks>
    </member>
    <member name="T:Griffin.Networking.Protocols.Basic.BasicMessageFactory">
      <summary>
            Used to construct the messaging serializer/builder
            </summary>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageFactory.CreateSerializer">
      <summary>
            Create a new serializer (used to convert messages to byte buffers)
            </summary>
      <returns>
        <see cref="T:Griffin.Networking.Protocols.Basic.BasicMessageSerializer" /> per default</returns>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageFactory.CreateBuilder">
      <summary>
            Create a message builder (used to compose messages from byte buffers)
            </summary>
      <returns>
        <see cref="T:Griffin.Networking.Protocols.Basic.BasicMessageBuilder" /> per default</returns>
    </member>
    <member name="T:Griffin.Networking.Protocols.Basic.BasicMessageSerializer">
      <summary>
            Serializes the message into the <see cref="T:Griffin.Networking.Protocols.Basic.Packet" /> structure.
            </summary>
    </member>
    <member name="M:Griffin.Networking.Protocols.Basic.BasicMessageSerializer.Serialize(System.Object,Griffin.Networking.Buffers.IBufferWriter)">
      <summary>
            Serialize a message into something that can be transported over the socket.
            </summary>
      <param name="message">Message to serialize</param>
      <param name="writer">Buffer used to store the message</param>
    </member>
    <member name="N:Griffin.Networking.Protocols.Basic">
      <summary>
            Lightweight transportation of objects over the wire.
            </summary>
      <remarks>Uses json.net to serialize/deserialize the objects. The JSON is wrapped by a binary header (byte = version, int = XML size).
            <para>Simply construct a client or server using the <see cref="T:Griffin.Networking.Protocols.Basic.BasicMessageFactory" /></para></remarks>
      <example>
            Server:
            <code>
            // configuration
            var serviceFactory = new MyServiceFactory();
            var messageFactory = new BasicMessageFactory();
            var configuration = new MessagingServerConfiguration(messageFactory);
            
            // start
            var server = new MessagingServer(serviceFactory, configuration);
            server.Start(new IPEndPoint(IPAddress.Any, 7652));
            
            // class handling the requests
            public class MyService : MessagingService
            {
            	public override void HandleReceive(object message)
            	{
            		// We can only receive this kind of command
            		var msg = (OpenDoor) message;
            
            		Console.WriteLine("Should open door: {0}.", msg.Id);
            
            		// Send a reply
            		Context.Write(new DoorOpened(msg.Id));
            	}
            }
            </code>
            Client:
            <code>
            // configuration
            var messageFactory = new BasicMessageFactory();
            
            var client = new MessagingClient(messageFactory);
            client.Connect(new IPEndPoint(IPAddress.Loopback, 7652));
            
            // Look here! We receive objects!
            client.Received += (sender, eventArgs) =&gt; Console.WriteLine("We received: " + eventArgs.Message);
            
            // And here we are sending one.
            client.Send(new OpenDoor {Id = Guid.NewGuid().ToString()});
            </code></example>
    </member>
    <member name="T:Griffin.Networking.Protocols.Basic.Packet">
      <summary>
            Binary packet used to transport the information
            </summary>
    </member>
    <member name="F:Griffin.Networking.Protocols.Basic.Packet.HeaderLength">
      <summary>
            Total header length
            </summary>
    </member>
    <member name="F:Griffin.Networking.Protocols.Basic.Packet.ContentLength">
      <summary>
            Length of the body
            </summary>
    </member>
    <member name="F:Griffin.Networking.Protocols.Basic.Packet.Message">
      <summary>
            Stream used when building the body
            </summary>
    </member>
    <member name="F:Griffin.Networking.Protocols.Basic.Packet.Version">
      <summary>
            Packet version
            </summary>
    </member>
  </members>
</doc>